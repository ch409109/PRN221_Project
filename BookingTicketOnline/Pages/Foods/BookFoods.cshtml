@page
@model BookingTicketOnline.Pages.Foods.BookFoodsModel
@{
    Layout = "_Layout";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="text-center mb-0">Popcorn & Drinks Combo</h3>
                </div>
                <div class="card-body">
                    <form method="post">
                        @foreach (var item in Model.FoodAndDrinks)
                        {
                            <div class="card mb-3">
                                <div class="row g-0">
                                    <div class="col-md-3">
                                        <img src="/img/@item.Image" class="img-fluid rounded-start h-100" alt="@item.Name">
                                    </div>
                                    <div class="col-md-9">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h5 class="card-title">@item.Name</h5>
                                                <span class="text-primary fw-bold">@item.Price</span>
                                            </div>
                                            <div class="d-flex align-items-center mt-2">
                                                <label class="me-2">Quantity:</label>
                                                <div class="input-group" style="width: 150px;">
                                                    <button type="button" class="btn btn-outline-secondary" onclick="decreaseQuantity(@item.Id)">-</button>
                                                    <input type="number" class="form-control text-center"
                                                           id="quantity-@item.Id"
                                                           name="Quantities[@item.Id]"
                                                           value="@(Model.Quantities.ContainsKey(item.Id) ? Model.Quantities[item.Id] : 0)"
                                                           min="0" max="10"
                                                           onchange="updateTotal()">
                                                    <button type="button" class="btn btn-outline-secondary" onclick="increaseQuantity(@item.Id)">+</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="card mt-3">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">Total Amount:</h5>
                                    <h5 class="text-primary mb-0" id="totalAmount">0</h5>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-2 mt-3">
                            <button type="submit" class="btn btn-primary">Continue to Checkout</button>
                            <a asp-page="/Seat/BookSeat" class="btn btn-outline-secondary">Back</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const prices = @Html.Raw(Json.Serialize(Model.FoodAndDrinks.ToDictionary(x => x.Id, x => x.Price)));

        function decreaseQuantity(id) {
            const input = document.getElementById(`quantity-${id}`);
            if (input.value > 0) {
                input.value = parseInt(input.value) - 1;
                updateTotal();
                saveQuantities();
            }
        }

        function increaseQuantity(id) {
            const input = document.getElementById(`quantity-${id}`);
            if (input.value < 10) {
                input.value = parseInt(input.value) + 1;
                updateTotal();
                saveQuantities();
            }
        }

        function updateTotal() {
            let total = 0;
            Object.keys(prices).forEach(id => {
                const quantity = parseInt(document.getElementById(`quantity-${id}`).value);
                total += quantity * prices[id];
            });
            document.getElementById('totalAmount').innerText = `${total.toLocaleString()}`;
        }

        function saveQuantities() {
            const quantities = {};
            Object.keys(prices).forEach(id => {
                quantities[id] = parseInt(document.getElementById(`quantity-${id}`).value);
            });

            fetch('?handler=UpdateQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(quantities)
            });
        }

        // Initialize total on page load
        document.addEventListener('DOMContentLoaded', function () {
            updateTotal();
        });
    </script>
}